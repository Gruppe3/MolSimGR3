// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "input.hxx"

namespace input
{
  // decimalvector
  //

  const decimalvector::x_type& decimalvector::
  x () const
  {
    return this->x_.get ();
  }

  decimalvector::x_type& decimalvector::
  x ()
  {
    return this->x_.get ();
  }

  void decimalvector::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const decimalvector::y_type& decimalvector::
  y () const
  {
    return this->y_.get ();
  }

  decimalvector::y_type& decimalvector::
  y ()
  {
    return this->y_.get ();
  }

  void decimalvector::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  const decimalvector::z_type& decimalvector::
  z () const
  {
    return this->z_.get ();
  }

  decimalvector::z_type& decimalvector::
  z ()
  {
    return this->z_.get ();
  }

  void decimalvector::
  z (const z_type& x)
  {
    this->z_.set (x);
  }


  // integervector
  //

  const integervector::x_type& integervector::
  x () const
  {
    return this->x_.get ();
  }

  integervector::x_type& integervector::
  x ()
  {
    return this->x_.get ();
  }

  void integervector::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const integervector::y_type& integervector::
  y () const
  {
    return this->y_.get ();
  }

  integervector::y_type& integervector::
  y ()
  {
    return this->y_.get ();
  }

  void integervector::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  const integervector::z_type& integervector::
  z () const
  {
    return this->z_.get ();
  }

  integervector::z_type& integervector::
  z ()
  {
    return this->z_.get ();
  }

  void integervector::
  z (const z_type& x)
  {
    this->z_.set (x);
  }


  // molsimdata
  //

  const molsimdata::outputbasename_type& molsimdata::
  outputbasename () const
  {
    return this->outputbasename_.get ();
  }

  molsimdata::outputbasename_type& molsimdata::
  outputbasename ()
  {
    return this->outputbasename_.get ();
  }

  void molsimdata::
  outputbasename (const outputbasename_type& x)
  {
    this->outputbasename_.set (x);
  }

  void molsimdata::
  outputbasename (::std::auto_ptr< outputbasename_type > x)
  {
    this->outputbasename_.set (x);
  }

  const molsimdata::writefreq_type& molsimdata::
  writefreq () const
  {
    return this->writefreq_.get ();
  }

  molsimdata::writefreq_type& molsimdata::
  writefreq ()
  {
    return this->writefreq_.get ();
  }

  void molsimdata::
  writefreq (const writefreq_type& x)
  {
    this->writefreq_.set (x);
  }

  const molsimdata::timestep_type& molsimdata::
  timestep () const
  {
    return this->timestep_.get ();
  }

  molsimdata::timestep_type& molsimdata::
  timestep ()
  {
    return this->timestep_.get ();
  }

  void molsimdata::
  timestep (const timestep_type& x)
  {
    this->timestep_.set (x);
  }

  const molsimdata::endtime_type& molsimdata::
  endtime () const
  {
    return this->endtime_.get ();
  }

  molsimdata::endtime_type& molsimdata::
  endtime ()
  {
    return this->endtime_.get ();
  }

  void molsimdata::
  endtime (const endtime_type& x)
  {
    this->endtime_.set (x);
  }

  const molsimdata::domain_optional& molsimdata::
  domain () const
  {
    return this->domain_;
  }

  molsimdata::domain_optional& molsimdata::
  domain ()
  {
    return this->domain_;
  }

  void molsimdata::
  domain (const domain_type& x)
  {
    this->domain_.set (x);
  }

  void molsimdata::
  domain (const domain_optional& x)
  {
    this->domain_ = x;
  }

  void molsimdata::
  domain (::std::auto_ptr< domain_type > x)
  {
    this->domain_.set (x);
  }

  const molsimdata::objectlist_type& molsimdata::
  objectlist () const
  {
    return this->objectlist_.get ();
  }

  molsimdata::objectlist_type& molsimdata::
  objectlist ()
  {
    return this->objectlist_.get ();
  }

  void molsimdata::
  objectlist (const objectlist_type& x)
  {
    this->objectlist_.set (x);
  }

  void molsimdata::
  objectlist (::std::auto_ptr< objectlist_type > x)
  {
    this->objectlist_.set (x);
  }


  // domain
  //

  const domain::size_type& domain::
  size () const
  {
    return this->size_.get ();
  }

  domain::size_type& domain::
  size ()
  {
    return this->size_.get ();
  }

  void domain::
  size (const size_type& x)
  {
    this->size_.set (x);
  }

  void domain::
  size (::std::auto_ptr< size_type > x)
  {
    this->size_.set (x);
  }

  const domain::cutoff_type& domain::
  cutoff () const
  {
    return this->cutoff_.get ();
  }

  domain::cutoff_type& domain::
  cutoff ()
  {
    return this->cutoff_.get ();
  }

  void domain::
  cutoff (const cutoff_type& x)
  {
    this->cutoff_.set (x);
  }


  // objectlist
  //

  const objectlist::cuboid_sequence& objectlist::
  cuboid () const
  {
    return this->cuboid_;
  }

  objectlist::cuboid_sequence& objectlist::
  cuboid ()
  {
    return this->cuboid_;
  }

  void objectlist::
  cuboid (const cuboid_sequence& s)
  {
    this->cuboid_ = s;
  }

  const objectlist::sphere_sequence& objectlist::
  sphere () const
  {
    return this->sphere_;
  }

  objectlist::sphere_sequence& objectlist::
  sphere ()
  {
    return this->sphere_;
  }

  void objectlist::
  sphere (const sphere_sequence& s)
  {
    this->sphere_ = s;
  }

  const objectlist::particle_sequence& objectlist::
  particle () const
  {
    return this->particle_;
  }

  objectlist::particle_sequence& objectlist::
  particle ()
  {
    return this->particle_;
  }

  void objectlist::
  particle (const particle_sequence& s)
  {
    this->particle_ = s;
  }


  // cuboid
  //

  const cuboid::location_type& cuboid::
  location () const
  {
    return this->location_.get ();
  }

  cuboid::location_type& cuboid::
  location ()
  {
    return this->location_.get ();
  }

  void cuboid::
  location (const location_type& x)
  {
    this->location_.set (x);
  }

  void cuboid::
  location (::std::auto_ptr< location_type > x)
  {
    this->location_.set (x);
  }

  const cuboid::velocity_type& cuboid::
  velocity () const
  {
    return this->velocity_.get ();
  }

  cuboid::velocity_type& cuboid::
  velocity ()
  {
    return this->velocity_.get ();
  }

  void cuboid::
  velocity (const velocity_type& x)
  {
    this->velocity_.set (x);
  }

  void cuboid::
  velocity (::std::auto_ptr< velocity_type > x)
  {
    this->velocity_.set (x);
  }

  const cuboid::numparticles_type& cuboid::
  numparticles () const
  {
    return this->numparticles_.get ();
  }

  cuboid::numparticles_type& cuboid::
  numparticles ()
  {
    return this->numparticles_.get ();
  }

  void cuboid::
  numparticles (const numparticles_type& x)
  {
    this->numparticles_.set (x);
  }

  void cuboid::
  numparticles (::std::auto_ptr< numparticles_type > x)
  {
    this->numparticles_.set (x);
  }

  const cuboid::meshwidth_type& cuboid::
  meshwidth () const
  {
    return this->meshwidth_.get ();
  }

  cuboid::meshwidth_type& cuboid::
  meshwidth ()
  {
    return this->meshwidth_.get ();
  }

  void cuboid::
  meshwidth (const meshwidth_type& x)
  {
    this->meshwidth_.set (x);
  }

  const cuboid::mass_type& cuboid::
  mass () const
  {
    return this->mass_.get ();
  }

  cuboid::mass_type& cuboid::
  mass ()
  {
    return this->mass_.get ();
  }

  void cuboid::
  mass (const mass_type& x)
  {
    this->mass_.set (x);
  }

  const cuboid::brownian_type& cuboid::
  brownian () const
  {
    return this->brownian_.get ();
  }

  cuboid::brownian_type& cuboid::
  brownian ()
  {
    return this->brownian_.get ();
  }

  void cuboid::
  brownian (const brownian_type& x)
  {
    this->brownian_.set (x);
  }


  // sphere
  //

  const sphere::location_type& sphere::
  location () const
  {
    return this->location_.get ();
  }

  sphere::location_type& sphere::
  location ()
  {
    return this->location_.get ();
  }

  void sphere::
  location (const location_type& x)
  {
    this->location_.set (x);
  }

  void sphere::
  location (::std::auto_ptr< location_type > x)
  {
    this->location_.set (x);
  }

  const sphere::velocity_type& sphere::
  velocity () const
  {
    return this->velocity_.get ();
  }

  sphere::velocity_type& sphere::
  velocity ()
  {
    return this->velocity_.get ();
  }

  void sphere::
  velocity (const velocity_type& x)
  {
    this->velocity_.set (x);
  }

  void sphere::
  velocity (::std::auto_ptr< velocity_type > x)
  {
    this->velocity_.set (x);
  }

  const sphere::numparticles_type& sphere::
  numparticles () const
  {
    return this->numparticles_.get ();
  }

  sphere::numparticles_type& sphere::
  numparticles ()
  {
    return this->numparticles_.get ();
  }

  void sphere::
  numparticles (const numparticles_type& x)
  {
    this->numparticles_.set (x);
  }

  const sphere::meshwidth_type& sphere::
  meshwidth () const
  {
    return this->meshwidth_.get ();
  }

  sphere::meshwidth_type& sphere::
  meshwidth ()
  {
    return this->meshwidth_.get ();
  }

  void sphere::
  meshwidth (const meshwidth_type& x)
  {
    this->meshwidth_.set (x);
  }


  // particle
  //

  const particle::location_type& particle::
  location () const
  {
    return this->location_.get ();
  }

  particle::location_type& particle::
  location ()
  {
    return this->location_.get ();
  }

  void particle::
  location (const location_type& x)
  {
    this->location_.set (x);
  }

  void particle::
  location (::std::auto_ptr< location_type > x)
  {
    this->location_.set (x);
  }

  const particle::velocity_type& particle::
  velocity () const
  {
    return this->velocity_.get ();
  }

  particle::velocity_type& particle::
  velocity ()
  {
    return this->velocity_.get ();
  }

  void particle::
  velocity (const velocity_type& x)
  {
    this->velocity_.set (x);
  }

  void particle::
  velocity (::std::auto_ptr< velocity_type > x)
  {
    this->velocity_.set (x);
  }

  const particle::mass_type& particle::
  mass () const
  {
    return this->mass_.get ();
  }

  particle::mass_type& particle::
  mass ()
  {
    return this->mass_.get ();
  }

  void particle::
  mass (const mass_type& x)
  {
    this->mass_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace input
{
  // decimalvector
  //

  decimalvector::
  decimalvector (const x_type& x,
                 const y_type& y,
                 const z_type& z)
  : ::xml_schema::type (),
    x_ (x, this),
    y_ (y, this),
    z_ (z, this)
  {
  }

  decimalvector::
  decimalvector (const decimalvector& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this)
  {
  }

  decimalvector::
  decimalvector (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    x_ (this),
    y_ (this),
    z_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void decimalvector::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "z" && n.namespace_ ().empty ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "y",
        "");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "z",
        "");
    }
  }

  decimalvector* decimalvector::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class decimalvector (*this, f, c);
  }

  decimalvector& decimalvector::
  operator= (const decimalvector& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->x_ = x.x_;
      this->y_ = x.y_;
      this->z_ = x.z_;
    }

    return *this;
  }

  decimalvector::
  ~decimalvector ()
  {
  }

  // integervector
  //

  integervector::
  integervector (const x_type& x,
                 const y_type& y,
                 const z_type& z)
  : ::xml_schema::type (),
    x_ (x, this),
    y_ (y, this),
    z_ (z, this)
  {
  }

  integervector::
  integervector (const integervector& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this)
  {
  }

  integervector::
  integervector (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    x_ (this),
    y_ (this),
    z_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void integervector::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "z" && n.namespace_ ().empty ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "y",
        "");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "z",
        "");
    }
  }

  integervector* integervector::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class integervector (*this, f, c);
  }

  integervector& integervector::
  operator= (const integervector& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->x_ = x.x_;
      this->y_ = x.y_;
      this->z_ = x.z_;
    }

    return *this;
  }

  integervector::
  ~integervector ()
  {
  }

  // molsimdata
  //

  molsimdata::
  molsimdata (const outputbasename_type& outputbasename,
              const writefreq_type& writefreq,
              const timestep_type& timestep,
              const endtime_type& endtime,
              const objectlist_type& objectlist)
  : ::xml_schema::type (),
    outputbasename_ (outputbasename, this),
    writefreq_ (writefreq, this),
    timestep_ (timestep, this),
    endtime_ (endtime, this),
    domain_ (this),
    objectlist_ (objectlist, this)
  {
  }

  molsimdata::
  molsimdata (const outputbasename_type& outputbasename,
              const writefreq_type& writefreq,
              const timestep_type& timestep,
              const endtime_type& endtime,
              ::std::auto_ptr< objectlist_type > objectlist)
  : ::xml_schema::type (),
    outputbasename_ (outputbasename, this),
    writefreq_ (writefreq, this),
    timestep_ (timestep, this),
    endtime_ (endtime, this),
    domain_ (this),
    objectlist_ (objectlist, this)
  {
  }

  molsimdata::
  molsimdata (const molsimdata& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    outputbasename_ (x.outputbasename_, f, this),
    writefreq_ (x.writefreq_, f, this),
    timestep_ (x.timestep_, f, this),
    endtime_ (x.endtime_, f, this),
    domain_ (x.domain_, f, this),
    objectlist_ (x.objectlist_, f, this)
  {
  }

  molsimdata::
  molsimdata (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    outputbasename_ (this),
    writefreq_ (this),
    timestep_ (this),
    endtime_ (this),
    domain_ (this),
    objectlist_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void molsimdata::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // outputbasename
      //
      if (n.name () == "outputbasename" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< outputbasename_type > r (
          outputbasename_traits::create (i, f, this));

        if (!outputbasename_.present ())
        {
          this->outputbasename_.set (r);
          continue;
        }
      }

      // writefreq
      //
      if (n.name () == "writefreq" && n.namespace_ ().empty ())
      {
        if (!writefreq_.present ())
        {
          this->writefreq_.set (writefreq_traits::create (i, f, this));
          continue;
        }
      }

      // timestep
      //
      if (n.name () == "timestep" && n.namespace_ ().empty ())
      {
        if (!timestep_.present ())
        {
          this->timestep_.set (timestep_traits::create (i, f, this));
          continue;
        }
      }

      // endtime
      //
      if (n.name () == "endtime" && n.namespace_ ().empty ())
      {
        if (!endtime_.present ())
        {
          this->endtime_.set (endtime_traits::create (i, f, this));
          continue;
        }
      }

      // domain
      //
      if (n.name () == "domain" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< domain_type > r (
          domain_traits::create (i, f, this));

        if (!this->domain_)
        {
          this->domain_.set (r);
          continue;
        }
      }

      // objectlist
      //
      if (n.name () == "objectlist" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< objectlist_type > r (
          objectlist_traits::create (i, f, this));

        if (!objectlist_.present ())
        {
          this->objectlist_.set (r);
          continue;
        }
      }

      break;
    }

    if (!outputbasename_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "outputbasename",
        "");
    }

    if (!writefreq_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "writefreq",
        "");
    }

    if (!timestep_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "timestep",
        "");
    }

    if (!endtime_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "endtime",
        "");
    }

    if (!objectlist_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "objectlist",
        "");
    }
  }

  molsimdata* molsimdata::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class molsimdata (*this, f, c);
  }

  molsimdata& molsimdata::
  operator= (const molsimdata& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->outputbasename_ = x.outputbasename_;
      this->writefreq_ = x.writefreq_;
      this->timestep_ = x.timestep_;
      this->endtime_ = x.endtime_;
      this->domain_ = x.domain_;
      this->objectlist_ = x.objectlist_;
    }

    return *this;
  }

  molsimdata::
  ~molsimdata ()
  {
  }

  // domain
  //

  domain::
  domain (const size_type& size,
          const cutoff_type& cutoff)
  : ::xml_schema::type (),
    size_ (size, this),
    cutoff_ (cutoff, this)
  {
  }

  domain::
  domain (::std::auto_ptr< size_type > size,
          const cutoff_type& cutoff)
  : ::xml_schema::type (),
    size_ (size, this),
    cutoff_ (cutoff, this)
  {
  }

  domain::
  domain (const domain& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    size_ (x.size_, f, this),
    cutoff_ (x.cutoff_, f, this)
  {
  }

  domain::
  domain (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    size_ (this),
    cutoff_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void domain::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // size
      //
      if (n.name () == "size" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< size_type > r (
          size_traits::create (i, f, this));

        if (!size_.present ())
        {
          this->size_.set (r);
          continue;
        }
      }

      // cutoff
      //
      if (n.name () == "cutoff" && n.namespace_ ().empty ())
      {
        if (!cutoff_.present ())
        {
          this->cutoff_.set (cutoff_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!size_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "size",
        "");
    }

    if (!cutoff_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "cutoff",
        "");
    }
  }

  domain* domain::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class domain (*this, f, c);
  }

  domain& domain::
  operator= (const domain& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->size_ = x.size_;
      this->cutoff_ = x.cutoff_;
    }

    return *this;
  }

  domain::
  ~domain ()
  {
  }

  // objectlist
  //

  objectlist::
  objectlist ()
  : ::xml_schema::type (),
    cuboid_ (this),
    sphere_ (this),
    particle_ (this)
  {
  }

  objectlist::
  objectlist (const objectlist& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    cuboid_ (x.cuboid_, f, this),
    sphere_ (x.sphere_, f, this),
    particle_ (x.particle_, f, this)
  {
  }

  objectlist::
  objectlist (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    cuboid_ (this),
    sphere_ (this),
    particle_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void objectlist::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // cuboid
      //
      if (n.name () == "cuboid" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< cuboid_type > r (
          cuboid_traits::create (i, f, this));

        this->cuboid_.push_back (r);
        continue;
      }

      // sphere
      //
      if (n.name () == "sphere" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< sphere_type > r (
          sphere_traits::create (i, f, this));

        this->sphere_.push_back (r);
        continue;
      }

      // particle
      //
      if (n.name () == "particle" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< particle_type > r (
          particle_traits::create (i, f, this));

        this->particle_.push_back (r);
        continue;
      }

      break;
    }
  }

  objectlist* objectlist::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class objectlist (*this, f, c);
  }

  objectlist& objectlist::
  operator= (const objectlist& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->cuboid_ = x.cuboid_;
      this->sphere_ = x.sphere_;
      this->particle_ = x.particle_;
    }

    return *this;
  }

  objectlist::
  ~objectlist ()
  {
  }

  // cuboid
  //

  cuboid::
  cuboid (const location_type& location,
          const velocity_type& velocity,
          const numparticles_type& numparticles,
          const meshwidth_type& meshwidth,
          const mass_type& mass,
          const brownian_type& brownian)
  : ::xml_schema::type (),
    location_ (location, this),
    velocity_ (velocity, this),
    numparticles_ (numparticles, this),
    meshwidth_ (meshwidth, this),
    mass_ (mass, this),
    brownian_ (brownian, this)
  {
  }

  cuboid::
  cuboid (::std::auto_ptr< location_type > location,
          ::std::auto_ptr< velocity_type > velocity,
          ::std::auto_ptr< numparticles_type > numparticles,
          const meshwidth_type& meshwidth,
          const mass_type& mass,
          const brownian_type& brownian)
  : ::xml_schema::type (),
    location_ (location, this),
    velocity_ (velocity, this),
    numparticles_ (numparticles, this),
    meshwidth_ (meshwidth, this),
    mass_ (mass, this),
    brownian_ (brownian, this)
  {
  }

  cuboid::
  cuboid (const cuboid& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    location_ (x.location_, f, this),
    velocity_ (x.velocity_, f, this),
    numparticles_ (x.numparticles_, f, this),
    meshwidth_ (x.meshwidth_, f, this),
    mass_ (x.mass_, f, this),
    brownian_ (x.brownian_, f, this)
  {
  }

  cuboid::
  cuboid (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    location_ (this),
    velocity_ (this),
    numparticles_ (this),
    meshwidth_ (this),
    mass_ (this),
    brownian_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void cuboid::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // location
      //
      if (n.name () == "location" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        if (!location_.present ())
        {
          this->location_.set (r);
          continue;
        }
      }

      // velocity
      //
      if (n.name () == "velocity" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< velocity_type > r (
          velocity_traits::create (i, f, this));

        if (!velocity_.present ())
        {
          this->velocity_.set (r);
          continue;
        }
      }

      // numparticles
      //
      if (n.name () == "numparticles" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< numparticles_type > r (
          numparticles_traits::create (i, f, this));

        if (!numparticles_.present ())
        {
          this->numparticles_.set (r);
          continue;
        }
      }

      // meshwidth
      //
      if (n.name () == "meshwidth" && n.namespace_ ().empty ())
      {
        if (!meshwidth_.present ())
        {
          this->meshwidth_.set (meshwidth_traits::create (i, f, this));
          continue;
        }
      }

      // mass
      //
      if (n.name () == "mass" && n.namespace_ ().empty ())
      {
        if (!mass_.present ())
        {
          this->mass_.set (mass_traits::create (i, f, this));
          continue;
        }
      }

      // brownian
      //
      if (n.name () == "brownian" && n.namespace_ ().empty ())
      {
        if (!brownian_.present ())
        {
          this->brownian_.set (brownian_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!location_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "location",
        "");
    }

    if (!velocity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "velocity",
        "");
    }

    if (!numparticles_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "numparticles",
        "");
    }

    if (!meshwidth_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "meshwidth",
        "");
    }

    if (!mass_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mass",
        "");
    }

    if (!brownian_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "brownian",
        "");
    }
  }

  cuboid* cuboid::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class cuboid (*this, f, c);
  }

  cuboid& cuboid::
  operator= (const cuboid& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->location_ = x.location_;
      this->velocity_ = x.velocity_;
      this->numparticles_ = x.numparticles_;
      this->meshwidth_ = x.meshwidth_;
      this->mass_ = x.mass_;
      this->brownian_ = x.brownian_;
    }

    return *this;
  }

  cuboid::
  ~cuboid ()
  {
  }

  // sphere
  //

  sphere::
  sphere (const location_type& location,
          const velocity_type& velocity,
          const numparticles_type& numparticles,
          const meshwidth_type& meshwidth)
  : ::xml_schema::type (),
    location_ (location, this),
    velocity_ (velocity, this),
    numparticles_ (numparticles, this),
    meshwidth_ (meshwidth, this)
  {
  }

  sphere::
  sphere (::std::auto_ptr< location_type > location,
          ::std::auto_ptr< velocity_type > velocity,
          const numparticles_type& numparticles,
          const meshwidth_type& meshwidth)
  : ::xml_schema::type (),
    location_ (location, this),
    velocity_ (velocity, this),
    numparticles_ (numparticles, this),
    meshwidth_ (meshwidth, this)
  {
  }

  sphere::
  sphere (const sphere& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    location_ (x.location_, f, this),
    velocity_ (x.velocity_, f, this),
    numparticles_ (x.numparticles_, f, this),
    meshwidth_ (x.meshwidth_, f, this)
  {
  }

  sphere::
  sphere (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    location_ (this),
    velocity_ (this),
    numparticles_ (this),
    meshwidth_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void sphere::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // location
      //
      if (n.name () == "location" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        if (!location_.present ())
        {
          this->location_.set (r);
          continue;
        }
      }

      // velocity
      //
      if (n.name () == "velocity" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< velocity_type > r (
          velocity_traits::create (i, f, this));

        if (!velocity_.present ())
        {
          this->velocity_.set (r);
          continue;
        }
      }

      // numparticles
      //
      if (n.name () == "numparticles" && n.namespace_ ().empty ())
      {
        if (!numparticles_.present ())
        {
          this->numparticles_.set (numparticles_traits::create (i, f, this));
          continue;
        }
      }

      // meshwidth
      //
      if (n.name () == "meshwidth" && n.namespace_ ().empty ())
      {
        if (!meshwidth_.present ())
        {
          this->meshwidth_.set (meshwidth_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!location_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "location",
        "");
    }

    if (!velocity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "velocity",
        "");
    }

    if (!numparticles_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "numparticles",
        "");
    }

    if (!meshwidth_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "meshwidth",
        "");
    }
  }

  sphere* sphere::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class sphere (*this, f, c);
  }

  sphere& sphere::
  operator= (const sphere& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->location_ = x.location_;
      this->velocity_ = x.velocity_;
      this->numparticles_ = x.numparticles_;
      this->meshwidth_ = x.meshwidth_;
    }

    return *this;
  }

  sphere::
  ~sphere ()
  {
  }

  // particle
  //

  particle::
  particle (const location_type& location,
            const velocity_type& velocity,
            const mass_type& mass)
  : ::xml_schema::type (),
    location_ (location, this),
    velocity_ (velocity, this),
    mass_ (mass, this)
  {
  }

  particle::
  particle (::std::auto_ptr< location_type > location,
            ::std::auto_ptr< velocity_type > velocity,
            const mass_type& mass)
  : ::xml_schema::type (),
    location_ (location, this),
    velocity_ (velocity, this),
    mass_ (mass, this)
  {
  }

  particle::
  particle (const particle& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    location_ (x.location_, f, this),
    velocity_ (x.velocity_, f, this),
    mass_ (x.mass_, f, this)
  {
  }

  particle::
  particle (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    location_ (this),
    velocity_ (this),
    mass_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void particle::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // location
      //
      if (n.name () == "location" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        if (!location_.present ())
        {
          this->location_.set (r);
          continue;
        }
      }

      // velocity
      //
      if (n.name () == "velocity" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< velocity_type > r (
          velocity_traits::create (i, f, this));

        if (!velocity_.present ())
        {
          this->velocity_.set (r);
          continue;
        }
      }

      // mass
      //
      if (n.name () == "mass" && n.namespace_ ().empty ())
      {
        if (!mass_.present ())
        {
          this->mass_.set (mass_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!location_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "location",
        "");
    }

    if (!velocity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "velocity",
        "");
    }

    if (!mass_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mass",
        "");
    }
  }

  particle* particle::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class particle (*this, f, c);
  }

  particle& particle::
  operator= (const particle& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->location_ = x.location_;
      this->velocity_ = x.velocity_;
      this->mass_ = x.mass_;
    }

    return *this;
  }

  particle::
  ~particle ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace input
{
  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::input::molsimdata > (
      ::input::molsimdata_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::input::molsimdata > (
      ::input::molsimdata_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::input::molsimdata > (
      ::input::molsimdata_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::input::molsimdata_ (isrc, f, p);
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::input::molsimdata_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::input::molsimdata_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::input::molsimdata_ (isrc, f, p);
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::input::molsimdata_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::input::molsimdata_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::input::molsimdata > (
      ::input::molsimdata_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::input::molsimdata > (
      ::input::molsimdata_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::input::molsimdata > (
      ::input::molsimdata_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::input::molsimdata > (
        ::input::molsimdata_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "molsimdata" &&
        n.namespace_ () == "http://www.example.org/input/")
    {
      ::std::auto_ptr< ::input::molsimdata > r (
        ::xsd::cxx::tree::traits< ::input::molsimdata, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "molsimdata",
      "http://www.example.org/input/");
  }

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "molsimdata" &&
        n.namespace_ () == "http://www.example.org/input/")
    {
      ::std::auto_ptr< ::input::molsimdata > r (
        ::xsd::cxx::tree::traits< ::input::molsimdata, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "molsimdata",
      "http://www.example.org/input/");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

