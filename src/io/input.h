// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MOLSIM_INPUT_HXX
#define MOLSIM_INPUT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace input
{
  class decimalvector;
  class integervector;
  class boundarytype;
  class molsimdata;
  class domain;
  class thermostat;
  class objectlist;
  class particleTypes;
  class boundaries;
  class cuboid;
  class sphere;
  class particle;
  class type;
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace input
{
  class decimalvector: public ::xml_schema::type
  {
    public:
    // x
    //
    typedef ::xml_schema::double_ x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char, ::xsd::cxx::tree::schema_type::double_ > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    // y
    //
    typedef ::xml_schema::double_ y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char, ::xsd::cxx::tree::schema_type::double_ > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    // z
    //
    typedef ::xml_schema::double_ z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char, ::xsd::cxx::tree::schema_type::double_ > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    // Constructors.
    //
    decimalvector (const x_type&,
                   const y_type&,
                   const z_type&);

    decimalvector (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    decimalvector (const decimalvector& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual decimalvector*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    decimalvector&
    operator= (const decimalvector& x);

    virtual 
    ~decimalvector ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class integervector: public ::xml_schema::type
  {
    public:
    // x
    //
    typedef ::xml_schema::unsigned_int x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    // y
    //
    typedef ::xml_schema::unsigned_int y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    // z
    //
    typedef ::xml_schema::unsigned_int z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    // Constructors.
    //
    integervector (const x_type&,
                   const y_type&,
                   const z_type&);

    integervector (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    integervector (const integervector& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual integervector*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    integervector&
    operator= (const integervector& x);

    virtual 
    ~integervector ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class boundarytype: public ::xml_schema::string
  {
    public:
    enum value
    {
      outflow,
      reflecting,
      periodic
    };

    boundarytype (value v);

    boundarytype (const char* v);

    boundarytype (const ::std::string& v);

    boundarytype (const ::xml_schema::string& v);

    boundarytype (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    boundarytype (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    boundarytype (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    boundarytype (const boundarytype& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual boundarytype*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    boundarytype&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_boundarytype_convert ();
    }

    protected:
    value
    _xsd_boundarytype_convert () const;

    public:
    static const char* const _xsd_boundarytype_literals_[3];
    static const value _xsd_boundarytype_indexes_[3];
  };

  class molsimdata: public ::xml_schema::type
  {
    public:
    // outputbasename
    //
    typedef ::xml_schema::string outputbasename_type;
    typedef ::xsd::cxx::tree::traits< outputbasename_type, char > outputbasename_traits;

    const outputbasename_type&
    outputbasename () const;

    outputbasename_type&
    outputbasename ();

    void
    outputbasename (const outputbasename_type& x);

    void
    outputbasename (::std::auto_ptr< outputbasename_type > p);

    // writefreq
    //
    typedef ::xml_schema::unsigned_int writefreq_type;
    typedef ::xsd::cxx::tree::traits< writefreq_type, char > writefreq_traits;

    const writefreq_type&
    writefreq () const;

    writefreq_type&
    writefreq ();

    void
    writefreq (const writefreq_type& x);

    // timestep
    //
    typedef ::xml_schema::double_ timestep_type;
    typedef ::xsd::cxx::tree::traits< timestep_type, char, ::xsd::cxx::tree::schema_type::double_ > timestep_traits;

    const timestep_type&
    timestep () const;

    timestep_type&
    timestep ();

    void
    timestep (const timestep_type& x);

    // endtime
    //
    typedef ::xml_schema::double_ endtime_type;
    typedef ::xsd::cxx::tree::traits< endtime_type, char, ::xsd::cxx::tree::schema_type::double_ > endtime_traits;

    const endtime_type&
    endtime () const;

    endtime_type&
    endtime ();

    void
    endtime (const endtime_type& x);

    // domain
    //
    typedef ::input::domain domain_type;
    typedef ::xsd::cxx::tree::optional< domain_type > domain_optional;
    typedef ::xsd::cxx::tree::traits< domain_type, char > domain_traits;

    const domain_optional&
    domain () const;

    domain_optional&
    domain ();

    void
    domain (const domain_type& x);

    void
    domain (const domain_optional& x);

    void
    domain (::std::auto_ptr< domain_type > p);

    // thermostat
    //
    typedef ::input::thermostat thermostat_type;
    typedef ::xsd::cxx::tree::traits< thermostat_type, char > thermostat_traits;

    const thermostat_type&
    thermostat () const;

    thermostat_type&
    thermostat ();

    void
    thermostat (const thermostat_type& x);

    void
    thermostat (::std::auto_ptr< thermostat_type > p);

    // objectlist
    //
    typedef ::input::objectlist objectlist_type;
    typedef ::xsd::cxx::tree::traits< objectlist_type, char > objectlist_traits;

    const objectlist_type&
    objectlist () const;

    objectlist_type&
    objectlist ();

    void
    objectlist (const objectlist_type& x);

    void
    objectlist (::std::auto_ptr< objectlist_type > p);

    // particleTypes
    //
    typedef ::input::particleTypes particleTypes_type;
    typedef ::xsd::cxx::tree::traits< particleTypes_type, char > particleTypes_traits;

    const particleTypes_type&
    particleTypes () const;

    particleTypes_type&
    particleTypes ();

    void
    particleTypes (const particleTypes_type& x);

    void
    particleTypes (::std::auto_ptr< particleTypes_type > p);

    // Constructors.
    //
    molsimdata (const outputbasename_type&,
                const writefreq_type&,
                const timestep_type&,
                const endtime_type&,
                const thermostat_type&,
                const objectlist_type&,
                const particleTypes_type&);

    molsimdata (const outputbasename_type&,
                const writefreq_type&,
                const timestep_type&,
                const endtime_type&,
                ::std::auto_ptr< thermostat_type >,
                ::std::auto_ptr< objectlist_type >,
                ::std::auto_ptr< particleTypes_type >);

    molsimdata (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    molsimdata (const molsimdata& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual molsimdata*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    molsimdata&
    operator= (const molsimdata& x);

    virtual 
    ~molsimdata ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< outputbasename_type > outputbasename_;
    ::xsd::cxx::tree::one< writefreq_type > writefreq_;
    ::xsd::cxx::tree::one< timestep_type > timestep_;
    ::xsd::cxx::tree::one< endtime_type > endtime_;
    domain_optional domain_;
    ::xsd::cxx::tree::one< thermostat_type > thermostat_;
    ::xsd::cxx::tree::one< objectlist_type > objectlist_;
    ::xsd::cxx::tree::one< particleTypes_type > particleTypes_;
  };

  class domain: public ::xml_schema::type
  {
    public:
    // size
    //
    typedef ::input::decimalvector size_type;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_type&
    size () const;

    size_type&
    size ();

    void
    size (const size_type& x);

    void
    size (::std::auto_ptr< size_type > p);

    // cutoff
    //
    typedef ::xml_schema::double_ cutoff_type;
    typedef ::xsd::cxx::tree::traits< cutoff_type, char, ::xsd::cxx::tree::schema_type::double_ > cutoff_traits;

    const cutoff_type&
    cutoff () const;

    cutoff_type&
    cutoff ();

    void
    cutoff (const cutoff_type& x);

    // boundaries
    //
    typedef ::input::boundaries boundaries_type;
    typedef ::xsd::cxx::tree::traits< boundaries_type, char > boundaries_traits;

    const boundaries_type&
    boundaries () const;

    boundaries_type&
    boundaries ();

    void
    boundaries (const boundaries_type& x);

    void
    boundaries (::std::auto_ptr< boundaries_type > p);

    // Constructors.
    //
    domain (const size_type&,
            const cutoff_type&,
            const boundaries_type&);

    domain (::std::auto_ptr< size_type >,
            const cutoff_type&,
            ::std::auto_ptr< boundaries_type >);

    domain (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    domain (const domain& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual domain*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    domain&
    operator= (const domain& x);

    virtual 
    ~domain ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< size_type > size_;
    ::xsd::cxx::tree::one< cutoff_type > cutoff_;
    ::xsd::cxx::tree::one< boundaries_type > boundaries_;
  };

  class thermostat: public ::xml_schema::type
  {
    public:
    // brownian
    //
    typedef ::xml_schema::double_ brownian_type;
    typedef ::xsd::cxx::tree::optional< brownian_type > brownian_optional;
    typedef ::xsd::cxx::tree::traits< brownian_type, char, ::xsd::cxx::tree::schema_type::double_ > brownian_traits;

    const brownian_optional&
    brownian () const;

    brownian_optional&
    brownian ();

    void
    brownian (const brownian_type& x);

    void
    brownian (const brownian_optional& x);

    // inittemp
    //
    typedef ::xml_schema::double_ inittemp_type;
    typedef ::xsd::cxx::tree::traits< inittemp_type, char, ::xsd::cxx::tree::schema_type::double_ > inittemp_traits;

    const inittemp_type&
    inittemp () const;

    inittemp_type&
    inittemp ();

    void
    inittemp (const inittemp_type& x);

    // starttime
    //
    typedef ::xml_schema::unsigned_int starttime_type;
    typedef ::xsd::cxx::tree::traits< starttime_type, char > starttime_traits;

    const starttime_type&
    starttime () const;

    starttime_type&
    starttime ();

    void
    starttime (const starttime_type& x);

    // targettemp
    //
    typedef ::xml_schema::double_ targettemp_type;
    typedef ::xsd::cxx::tree::traits< targettemp_type, char, ::xsd::cxx::tree::schema_type::double_ > targettemp_traits;

    const targettemp_type&
    targettemp () const;

    targettemp_type&
    targettemp ();

    void
    targettemp (const targettemp_type& x);

    // tempdiff
    //
    typedef ::xml_schema::double_ tempdiff_type;
    typedef ::xsd::cxx::tree::traits< tempdiff_type, char, ::xsd::cxx::tree::schema_type::double_ > tempdiff_traits;

    const tempdiff_type&
    tempdiff () const;

    tempdiff_type&
    tempdiff ();

    void
    tempdiff (const tempdiff_type& x);

    // interval
    //
    typedef ::xml_schema::unsigned_int interval_type;
    typedef ::xsd::cxx::tree::traits< interval_type, char > interval_traits;

    const interval_type&
    interval () const;

    interval_type&
    interval ();

    void
    interval (const interval_type& x);

    // Constructors.
    //
    thermostat (const inittemp_type&,
                const starttime_type&,
                const targettemp_type&,
                const tempdiff_type&,
                const interval_type&);

    thermostat (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    thermostat (const thermostat& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual thermostat*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    thermostat&
    operator= (const thermostat& x);

    virtual
    ~thermostat ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    brownian_optional brownian_;
    ::xsd::cxx::tree::one< inittemp_type > inittemp_;
    ::xsd::cxx::tree::one< starttime_type > starttime_;
    ::xsd::cxx::tree::one< targettemp_type > targettemp_;
    ::xsd::cxx::tree::one< tempdiff_type > tempdiff_;
    ::xsd::cxx::tree::one< interval_type > interval_;
  };

  class objectlist: public ::xml_schema::type
  {
    public:
    // cuboid
    //
    typedef ::input::cuboid cuboid_type;
    typedef ::xsd::cxx::tree::sequence< cuboid_type > cuboid_sequence;
    typedef cuboid_sequence::iterator cuboid_iterator;
    typedef cuboid_sequence::const_iterator cuboid_const_iterator;
    typedef ::xsd::cxx::tree::traits< cuboid_type, char > cuboid_traits;

    const cuboid_sequence&
    cuboid () const;

    cuboid_sequence&
    cuboid ();

    void
    cuboid (const cuboid_sequence& s);

    // sphere
    //
    typedef ::input::sphere sphere_type;
    typedef ::xsd::cxx::tree::sequence< sphere_type > sphere_sequence;
    typedef sphere_sequence::iterator sphere_iterator;
    typedef sphere_sequence::const_iterator sphere_const_iterator;
    typedef ::xsd::cxx::tree::traits< sphere_type, char > sphere_traits;

    const sphere_sequence&
    sphere () const;

    sphere_sequence&
    sphere ();

    void
    sphere (const sphere_sequence& s);

    // particle
    //
    typedef ::input::particle particle_type;
    typedef ::xsd::cxx::tree::sequence< particle_type > particle_sequence;
    typedef particle_sequence::iterator particle_iterator;
    typedef particle_sequence::const_iterator particle_const_iterator;
    typedef ::xsd::cxx::tree::traits< particle_type, char > particle_traits;

    const particle_sequence&
    particle () const;

    particle_sequence&
    particle ();

    void
    particle (const particle_sequence& s);

    // Constructors.
    //
    objectlist ();

    objectlist (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    objectlist (const objectlist& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual objectlist*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    objectlist&
    operator= (const objectlist& x);

    virtual 
    ~objectlist ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    cuboid_sequence cuboid_;
    sphere_sequence sphere_;
    particle_sequence particle_;
  };

  class particleTypes: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::input::type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // Constructors.
    //
    particleTypes ();

    particleTypes (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    particleTypes (const particleTypes& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual particleTypes*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    particleTypes&
    operator= (const particleTypes& x);

    virtual
    ~particleTypes ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    type_sequence type_;
  };

  class boundaries: public ::xml_schema::type
  {
    public:
    // front
    //
    typedef ::input::boundarytype front_type;
    typedef ::xsd::cxx::tree::traits< front_type, char > front_traits;

    const front_type&
    front () const;

    front_type&
    front ();

    void
    front (const front_type& x);

    void
    front (::std::auto_ptr< front_type > p);

    // back
    //
    typedef ::input::boundarytype back_type;
    typedef ::xsd::cxx::tree::traits< back_type, char > back_traits;

    const back_type&
    back () const;

    back_type&
    back ();

    void
    back (const back_type& x);

    void
    back (::std::auto_ptr< back_type > p);

    // left
    //
    typedef ::input::boundarytype left_type;
    typedef ::xsd::cxx::tree::traits< left_type, char > left_traits;

    const left_type&
    left () const;

    left_type&
    left ();

    void
    left (const left_type& x);

    void
    left (::std::auto_ptr< left_type > p);

    // right
    //
    typedef ::input::boundarytype right_type;
    typedef ::xsd::cxx::tree::traits< right_type, char > right_traits;

    const right_type&
    right () const;

    right_type&
    right ();

    void
    right (const right_type& x);

    void
    right (::std::auto_ptr< right_type > p);

    // top
    //
    typedef ::input::boundarytype top_type;
    typedef ::xsd::cxx::tree::traits< top_type, char > top_traits;

    const top_type&
    top () const;

    top_type&
    top ();

    void
    top (const top_type& x);

    void
    top (::std::auto_ptr< top_type > p);

    // bottom
    //
    typedef ::input::boundarytype bottom_type;
    typedef ::xsd::cxx::tree::traits< bottom_type, char > bottom_traits;

    const bottom_type&
    bottom () const;

    bottom_type&
    bottom ();

    void
    bottom (const bottom_type& x);

    void
    bottom (::std::auto_ptr< bottom_type > p);

    // Constructors.
    //
    boundaries (const front_type&,
                const back_type&,
                const left_type&,
                const right_type&,
                const top_type&,
                const bottom_type&);

    boundaries (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    boundaries (const boundaries& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual boundaries*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    boundaries&
    operator= (const boundaries& x);

    virtual 
    ~boundaries ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< front_type > front_;
    ::xsd::cxx::tree::one< back_type > back_;
    ::xsd::cxx::tree::one< left_type > left_;
    ::xsd::cxx::tree::one< right_type > right_;
    ::xsd::cxx::tree::one< top_type > top_;
    ::xsd::cxx::tree::one< bottom_type > bottom_;
  };

  class cuboid: public ::xml_schema::type
  {
    public:
    // location
    //
    typedef ::input::decimalvector location_type;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_type&
    location () const;

    location_type&
    location ();

    void
    location (const location_type& x);

    void
    location (::std::auto_ptr< location_type > p);

    // velocity
    //
    typedef ::input::decimalvector velocity_type;
    typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

    const velocity_type&
    velocity () const;

    velocity_type&
    velocity ();

    void
    velocity (const velocity_type& x);

    void
    velocity (::std::auto_ptr< velocity_type > p);

    // numparticles
    //
    typedef ::input::integervector numparticles_type;
    typedef ::xsd::cxx::tree::traits< numparticles_type, char > numparticles_traits;

    const numparticles_type&
    numparticles () const;

    numparticles_type&
    numparticles ();

    void
    numparticles (const numparticles_type& x);

    void
    numparticles (::std::auto_ptr< numparticles_type > p);

    // meshwidth
    //
    typedef ::xml_schema::double_ meshwidth_type;
    typedef ::xsd::cxx::tree::traits< meshwidth_type, char, ::xsd::cxx::tree::schema_type::double_ > meshwidth_traits;

    const meshwidth_type&
    meshwidth () const;

    meshwidth_type&
    meshwidth ();

    void
    meshwidth (const meshwidth_type& x);

    // mass
    //
    typedef ::xml_schema::double_ mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    // type
    //
    typedef ::xml_schema::unsigned_int type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    // Constructors.
    //
    cuboid (const location_type&,
            const velocity_type&,
            const numparticles_type&,
            const meshwidth_type&,
            const mass_type&);

    cuboid (::std::auto_ptr< location_type >,
            ::std::auto_ptr< velocity_type >,
            ::std::auto_ptr< numparticles_type >,
            const meshwidth_type&,
            const mass_type&);

    cuboid (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    cuboid (const cuboid& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual cuboid*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    cuboid&
    operator= (const cuboid& x);

    virtual 
    ~cuboid ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< location_type > location_;
    ::xsd::cxx::tree::one< velocity_type > velocity_;
    ::xsd::cxx::tree::one< numparticles_type > numparticles_;
    ::xsd::cxx::tree::one< meshwidth_type > meshwidth_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    type_optional type_;
  };

  class sphere: public ::xml_schema::type
  {
    public:
    // location
    //
    typedef ::input::decimalvector location_type;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_type&
    location () const;

    location_type&
    location ();

    void
    location (const location_type& x);

    void
    location (::std::auto_ptr< location_type > p);

    // velocity
    //
    typedef ::input::decimalvector velocity_type;
    typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

    const velocity_type&
    velocity () const;

    velocity_type&
    velocity ();

    void
    velocity (const velocity_type& x);

    void
    velocity (::std::auto_ptr< velocity_type > p);

    // numparticles
    //
    typedef ::xml_schema::unsigned_int numparticles_type;
    typedef ::xsd::cxx::tree::traits< numparticles_type, char > numparticles_traits;

    const numparticles_type&
    numparticles () const;

    numparticles_type&
    numparticles ();

    void
    numparticles (const numparticles_type& x);

    // meshwidth
    //
    typedef ::xml_schema::double_ meshwidth_type;
    typedef ::xsd::cxx::tree::traits< meshwidth_type, char, ::xsd::cxx::tree::schema_type::double_ > meshwidth_traits;

    const meshwidth_type&
    meshwidth () const;

    meshwidth_type&
    meshwidth ();

    void
    meshwidth (const meshwidth_type& x);

    // mass
    //
    typedef ::xml_schema::double_ mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    // sigma
    //
    typedef ::xml_schema::double_ sigma_type;
    typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_traits;

    const sigma_type&
    sigma () const;

    sigma_type&
    sigma ();

    void
    sigma (const sigma_type& x);

    // epsilon
    //
    typedef ::xml_schema::double_ epsilon_type;
    typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

    const epsilon_type&
    epsilon () const;

    epsilon_type&
    epsilon ();

    void
    epsilon (const epsilon_type& x);

    // type
    //
    typedef ::xml_schema::unsigned_int type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    // Constructors.
    //
    sphere (const location_type&,
            const velocity_type&,
            const numparticles_type&,
            const meshwidth_type&,
            const mass_type&,
            const sigma_type&,
            const epsilon_type&);

    sphere (::std::auto_ptr< location_type >,
            ::std::auto_ptr< velocity_type >,
            const numparticles_type&,
            const meshwidth_type&,
            const mass_type&,
            const sigma_type&,
            const epsilon_type&);

    sphere (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    sphere (const sphere& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual sphere*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    sphere&
    operator= (const sphere& x);

    virtual 
    ~sphere ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< location_type > location_;
    ::xsd::cxx::tree::one< velocity_type > velocity_;
    ::xsd::cxx::tree::one< numparticles_type > numparticles_;
    ::xsd::cxx::tree::one< meshwidth_type > meshwidth_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    ::xsd::cxx::tree::one< sigma_type > sigma_;
    ::xsd::cxx::tree::one< epsilon_type > epsilon_;
    type_optional type_;
  };

  class particle: public ::xml_schema::type
  {
    public:
    // location
    //
    typedef ::input::decimalvector location_type;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_type&
    location () const;

    location_type&
    location ();

    void
    location (const location_type& x);

    void
    location (::std::auto_ptr< location_type > p);

    // velocity
    //
    typedef ::input::decimalvector velocity_type;
    typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

    const velocity_type&
    velocity () const;

    velocity_type&
    velocity ();

    void
    velocity (const velocity_type& x);

    void
    velocity (::std::auto_ptr< velocity_type > p);

    // mass
    //
    typedef ::xml_schema::double_ mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    // type
    //
    typedef ::xml_schema::unsigned_int type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    // Constructors.
    //
    particle (const location_type&,
              const velocity_type&,
              const mass_type&);

    particle (::std::auto_ptr< location_type >,
              ::std::auto_ptr< velocity_type >,
              const mass_type&);

    particle (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    particle (const particle& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual particle*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    particle&
    operator= (const particle& x);

    virtual 
    ~particle ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< location_type > location_;
    ::xsd::cxx::tree::one< velocity_type > velocity_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    type_optional type_;
  };

  class type: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::unsigned_int id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    // sigma
    //
    typedef ::xml_schema::double_ sigma_type;
    typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_traits;

    const sigma_type&
    sigma () const;

    sigma_type&
    sigma ();

    void
    sigma (const sigma_type& x);

    // epsilon
    //
    typedef ::xml_schema::double_ epsilon_type;
    typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

    const epsilon_type&
    epsilon () const;

    epsilon_type&
    epsilon ();

    void
    epsilon (const epsilon_type& x);

    // Constructors.
    //
    type (const id_type&,
          const sigma_type&,
          const epsilon_type&);

    type (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const type& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    type&
    operator= (const type& x);

    virtual
    ~type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< sigma_type > sigma_;
    ::xsd::cxx::tree::one< epsilon_type > epsilon_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace input
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::input::molsimdata >
  molsimdata_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MOLSIM_INPUT_HXX
